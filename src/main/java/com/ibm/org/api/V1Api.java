/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ibm.org.api;

import com.ibm.org.model.FtRq;
import com.ibm.org.model.FtRs;
import com.ibm.org.model.FtquicktransferRq;
import com.ibm.org.model.FtquicktransferRs;
import com.ibm.org.model.FtrepeatRq;
import com.ibm.org.model.FtrepeatRs;
import com.ibm.org.model.FtselftransferRq;
import com.ibm.org.model.FtselftransferRs;
import com.ibm.org.model.HTTPError;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Validated
@Api(value = "v1", description = "the v1 API")
public interface V1Api {
    

    @ApiOperation(value = "InCR Initiate a payment execution procedure", nickname = "initiate", notes = "InCR Initiate a payment execution procedure", response = FtRs.class, tags={ "CR - Fund transfer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FtRs.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/v1/bian-3/core/payment/debitor/10.0.0/fundtransfer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FtRs> initiate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FtRq ftRq); 


    @ApiOperation(value = "InCR Initiate quicktransfer procedure", nickname = "quicktransfer", notes = "InCR Initiate quicktransfer procedure", response = FtquicktransferRs.class, tags={ "CR - Fund transfer quickPay", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FtquicktransferRs.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/v1/bian-3/core/payment/debitor/10.0.0/fundtransfer/quickpay",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FtquicktransferRs> quicktransfer(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FtquicktransferRq ftquicktransferRq); 


    @ApiOperation(value = "InCR Initiate a repeat procedure", nickname = "repeat", notes = "InCR repeat procedure", response = FtrepeatRs.class, tags={ "CR - Fund transfer Repeat", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FtrepeatRs.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/v1/bian-3/core/payment/debitor/10.0.0/fundtransfer/repeat",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FtrepeatRs> repeat(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FtrepeatRq ftrepeatRq); 


    @ApiOperation(value = "InCR Initiate selftransfer procedure", nickname = "selftransfer", notes = "InCR Initiate selftransfer procedure", response = FtselftransferRs.class, tags={ "CR - Fund transfer selftransfer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FtselftransferRs.class),
        @ApiResponse(code = 400, message = "Bad Request", response = HTTPError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = HTTPError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = HTTPError.class),
        @ApiResponse(code = 404, message = "Not Found", response = HTTPError.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = HTTPError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = HTTPError.class) })
    @RequestMapping(value = "/v1/bian-3/core/payment/debitor/10.0.0/fundtransfer/selftransfer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FtselftransferRs> selftransfer(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FtselftransferRq ftselftransferRq); 

}
